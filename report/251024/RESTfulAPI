# RESTful API 정의와 사용 방법

## 1. API란?

- Application Programming Interface
- 프로그램들이 서로 효과적으로 상호작용할 수 있도록 데이터와 기능의 집합을 제공하는 도구
- 프로그램 간 소통을 원활하게 하고 기능을 활용해 데이터를 교환할 수 있도록 해주는 인터페이스
- 여러 애플리케이션, 시스템, 서비스가 통합되어 작동할 수 있도록 함

---

## 2. REST API

### 1) REST

- Representational State Transfer
- 웹에서 자원을 정의하고 자원에 대한 CRUD 작업을 HTTP 방식으로 수행하도록 설계된 아키텍처 스타일
- HTTP 프로토콜을 기반으로 하고, 주로 CRUD 작업을 수행하기 위한 URI 엔드포인트를 제공함
- 두 컴퓨터 시스템이 인터넷을 통해 정보를 안전하게 교환하기 위해 사용하는 인터페이스
- 자원을 이름(자원의 표현)으로 구분해 해당 자원의 상태(정보)를 주고받는 모든 것을 의미

### 2) REST의 특징

- 클라이언트-서버 구조
  - 클라이언트와 서버가 독립적으로 개발되고 배포되어야 함
  - 클라이언트는 UI, 서버는 자원 관리와 비즈니스 로직을 담당
- 무상태성(Stateless)
  - 서버는 클라이언트의 각 요청을 완전히 독립적으로 처리하며, 이전 요청의 상태를 저장하지 않음
  - 모든 정보는 요청 자체에 포함되어야 함
- 캐시 가능성
  - HTTP의 캐싱 메커니즘을 사용해 응답을 캐시할 수 있어야 함
  - 네트워크 트래픽을 줄이고, 응답 시간을 향상시킴
- 통일된 인터페이스
  - 시스템의 각 부분이 일관되고 통일된 방식으로 통신
  - 자원 식별: 모든 자원은 URI로 고유 식별
  - 메시지를 통한 자원 조작: 클라이언트는 자원의 표현을 받아 자원을 조작할 수 있음
  - 자기 서술적 메시지: 메시지 자체에 필요한 모든 정보가 포함되어 있어 독립적으로 이해할 수 있어야 함
  - HATEOAS(Hypermedia As The Engine Of Application State):자원에 접근한 후 다음 가능한 작업(하이퍼링크)을 찾을 수 있어야 함
- 계층화 시스템
  - 클라이언트는 서버와 직접 통신할 수도 있고, 중간 계층을 통해 통신할 수도 있음
  - ex: 프록시, 로드밸런서, API 게이트웨이

### 3) REST API 구성

#### 1. 자원(Resource) - URL

- 모든 자원에 고유한 ID가 존재하고, 이 자원은 서버에 존재
- 자원을 구분하는 ID는 HTTP URI(ex: `/users/1`)

#### 2. 행위(Verb)

- HTTP 프로토콜의 메서드를 사용
- HTTP 프로토콜은 `GET`, `POST`, `PUT`, `DELETE`와 같은 메서드 제공

#### 3. 표현(Representations)

- 클라이언트가 자원의 상태(정보)에 대한 조작을 요청하면, 서버는 이에 적절한 응답을 제공
- REST에서 하나의 자원은 `JSON`, `XML` 등 여러 형태로 나타낼 수 있음

---

## 3. RESTful API

- REST 규칙을 따르는 API
- 두 컴퓨터 시스템이 인터넷을 통해 정보를 안전하게 교환하기 위해 사용하는 인터페이스
- 클라이언트와 서버 간의 통신을 효율적이고 확장 가능하게 만들기 위해 웹의 기존 기술과 프로토콜인 HTTP를 기반으로 설계됨
- HTTP와 URI를 기반으로 자원에 접근하고 CRUD 수행
- RESTful API 설계 규칙을 지켜 주소만으로 요청 내용 이해 가능

### 1) RESTful API 설계 규칙

#### 1. URI에 자원 명시

- 목록 조회: `GET /api/posts`
- 개별 자원 조회: `GET /api/posts/1`
- 자원 생성: `POST /api/posts`
- 자원 수정: `PUT /api/posts/1`
- 자원 삭제: `DELETE /api/posts/1`

#### 2. URI 구분자는 `/` 사용

#### 3. URI의 마지막에 `/`를 포함하지 않음

#### 4. `-`(하이픈) 사용

- `GET /api/categories/electronics-products`

#### 5. URI는 소문자로만 작성

#### 6. 확장자를 사용하지 않음

- `GET /api/posts.json` 으로 사용할 수 없음

#### 7. query parameter로 데이터를 검색

- `GET /api/products?category=electronics`

#### 8. 리소스 간의 관계 표현

- 관계 표현: `GET /api/users/{userId}/devices`
- 복잡한 관계 표현: `GET /api/users/{userId}/preferences/devices`

#### 9. 컬렉션과 도큐먼트 구분

- `GET /api/sports/football` (컬렉션: sports, 도큐먼트: football)
- `GET /api/sports/football/players/10` (컬렉션: sports, players, 도큐먼트: football, 10)

### 2) RESTful API 개발 원칙

#### 1. 자원 식별 가능

- URI만으로 내가 어떤 자원을 제어하려고 하는지 알 수 있어야 함
- 자원을 제어하기 위해 자원의 위치와 종류까지 알 수 있어야 함

#### 2. 행위 명시적

- HTTP 메서드로 행위 전달

#### 3. 자기 서술적

- 데이터에 대한 메타정보만으로도 어떤 종류의 데이터인지, 데이터를 위해서 어떤 애플리케이션을 실행해야 하는지를 알 수 있어야 함

#### 4. HATEOAS

- 클라이언트 요청에 대해 응답할 때, 추가적인 정보를 제공하는 링크를 포함할 수 있어야 함
- REST는 독립적으로 컴포넌트를 쉽게 연결하기 위한 목적으로도 사용되기 때문에 유연하기 연결하기 위해서는 느슨한 연결을 만들어줄 것이 필요한데, 이때 사용되는 게 링크임
- 서버는 클라이언트 응용 애플리케이션에 하이퍼링크 제공
- 클라이언트는 하이퍼링크를 통해 전체 네트워크와 연결되고, HATEOAS는 서버가 독립적으로 진화할 수 있도록 서버와 서버, 서버와 클라이언트를 분리할 수 있게 함

---

## 4. RESTful API 사용 방법

### 1) 요청(Request)

- URL: 고유 리소스 식별자(엔드포인트)
- method: 수행할 작업 명시(`GET`, `POST`, `PUT`, `DELETE`)
- header: 요청 및 응답 메타데이터 제공
- parameter
  - 경로: URL 세부 정보를 지정
  - 쿼리: 리소스에 대한 추가 정보를 요청
  - 쿠키: 클라이언트를 빠르게 인증

```http
GET /api/posts/1 HTTP/1.1
Host: example.com
Accept: application/json
```

### 2) 응답(Response)

- status code(상태코드): 요청 상태 표시
  - 2xx: 성공(200 OK, 201 Created)
  - 3xx: 리디렉션
  - 4xx: 클라이언트 오류(400 Bad Request, 404 Not Found)
  - 5xx: 서버 오류
- body(메시지 본문): 자원 표현(JSON, XML 등)
- header: 서버 정보, 인코딩, 날짜 및 콘텐츠 유형 등 추가 메타데이터

```http
HTTP/1.1 200 OK
Content-Type: application/json

{
  "id": 1,
  "title": "게시글 단일 조회",
  "author": "john",
  "createdAt": "2025-10-26T10:00:00Z"
}
```

---

## 5. RESTful API 장단점

### 1) 장점

#### 1. 확장성

- REST가 클라이언트-서버 상호작용을 최적화하기 때문에 시스템을 효율적으로 확장할 수 있음
- 무상태성 덕분에 서버는 클라이언트의 상태를 저장하지 않아 부하가 줄고, 캐시를 활용해 불필요한 요청을 줄여 성능을 높일 수 있음
- 이런 모든 기능이 성능을 저하시키는 통신 병목 현상을 일으키지 않으면서 확장성을 지원

#### 2. 유연성

- RESTful 웹 서비스는 완전한 클라이언트-서버 분리를 지원
- 클라이언트, 서버가 독립적으로 개발되거나 변경될 수 있고, 플램폼이나 기술이 바뀌어호 상호작용에 영향을 주지 않아 구조 변경과 확장에 자유로움

#### 3. 독립성

- REST API는 특정 언어나 프레임워크에 의존하지 않음
- 다양한 언어와 플랫폼에서 동일한 설계 원칙으로 구현이 가능하고, 통신 구조도 변하지 않음

#### 4. 단순성과 직관성

- URI와 HTTP 메서드를 기반으로 한 구조는 직관적이고 이해하기 쉬움
- 명확한 규칙을 따르므로 API 문서화와 협업이 쉬움

#### 5. 표준성 및 상호운용성

- HTTP 표준 프로토콜을 사용하므로, 별도의 전송 규약 없이 통신 가능
- 다양한 표현 형식(JSON, XML 등)을 지원해 여러 클라이언트와 통합하기 쉬움
- 시스템 간 호환성과 안전성이 높음

### 2) 단점

#### 1. 엄격한 표준 준수로 인한 개발 복잡성 증가

- REST 원칙을 철저히 지키려면 구현과 유지보수가 복잡해질 수 있음

#### 2. 제한된 메서드 표현력

- CRUD에 대응하는 4가지 메서드만 제공해 대부분의 작업을 처리할 수는 있지만, 처리하기 모호한 경우도 존재

#### 3. 보안 및 정책 관리의 부재

- REST는 보안, 인증, 통신 정책에 대한 명세를 포함하지 않기 때문에 개발자가 직접 보안을 설계하고 구현해야 함

#### 4. 실시간 양방향 통신에는 부적합

- REST는 point-to-point 통신 모델을 기본으로 하기 때문에 서버와 클라이언트가 상호작용 해야 하는 애플리케이션의 개발에는 적합하지 않음
